Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> Left expression Right
Rule 2     expression -> Predicate
Rule 3     expression -> expression And expression
Rule 4     expression -> expression Or expression
Rule 5     expression -> expression Inference expression
Rule 6     expression -> Not expression

Terminals, with rules where they appear

And                  : 3
Inference            : 5
Left                 : 1
Not                  : 6
Or                   : 4
Predicate            : 2
Right                : 1
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 3 4 4 5 5 6 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . Left expression Right
    (2) expression -> . Predicate
    (3) expression -> . expression And expression
    (4) expression -> . expression Or expression
    (5) expression -> . expression Inference expression
    (6) expression -> . Not expression

    Left            shift and go to state 2
    Predicate       shift and go to state 4
    Not             shift and go to state 1

    expression                     shift and go to state 3

state 1

    (6) expression -> Not . expression
    (1) expression -> . Left expression Right
    (2) expression -> . Predicate
    (3) expression -> . expression And expression
    (4) expression -> . expression Or expression
    (5) expression -> . expression Inference expression
    (6) expression -> . Not expression

    Left            shift and go to state 2
    Predicate       shift and go to state 4
    Not             shift and go to state 1

    expression                     shift and go to state 5

state 2

    (1) expression -> Left . expression Right
    (1) expression -> . Left expression Right
    (2) expression -> . Predicate
    (3) expression -> . expression And expression
    (4) expression -> . expression Or expression
    (5) expression -> . expression Inference expression
    (6) expression -> . Not expression

    Left            shift and go to state 2
    Predicate       shift and go to state 4
    Not             shift and go to state 1

    expression                     shift and go to state 6

state 3

    (0) S' -> expression .
    (3) expression -> expression . And expression
    (4) expression -> expression . Or expression
    (5) expression -> expression . Inference expression

    And             shift and go to state 8
    Or              shift and go to state 9
    Inference       shift and go to state 7


state 4

    (2) expression -> Predicate .

    Right           reduce using rule 2 (expression -> Predicate .)
    And             reduce using rule 2 (expression -> Predicate .)
    Or              reduce using rule 2 (expression -> Predicate .)
    Inference       reduce using rule 2 (expression -> Predicate .)
    $end            reduce using rule 2 (expression -> Predicate .)


state 5

    (6) expression -> Not expression .
    (3) expression -> expression . And expression
    (4) expression -> expression . Or expression
    (5) expression -> expression . Inference expression

    Right           reduce using rule 6 (expression -> Not expression .)
    And             reduce using rule 6 (expression -> Not expression .)
    Or              reduce using rule 6 (expression -> Not expression .)
    Inference       reduce using rule 6 (expression -> Not expression .)
    $end            reduce using rule 6 (expression -> Not expression .)

  ! And             [ shift and go to state 8 ]
  ! Or              [ shift and go to state 9 ]
  ! Inference       [ shift and go to state 7 ]


state 6

    (1) expression -> Left expression . Right
    (3) expression -> expression . And expression
    (4) expression -> expression . Or expression
    (5) expression -> expression . Inference expression

    Right           shift and go to state 10
    And             shift and go to state 8
    Or              shift and go to state 9
    Inference       shift and go to state 7


state 7

    (5) expression -> expression Inference . expression
    (1) expression -> . Left expression Right
    (2) expression -> . Predicate
    (3) expression -> . expression And expression
    (4) expression -> . expression Or expression
    (5) expression -> . expression Inference expression
    (6) expression -> . Not expression

    Left            shift and go to state 2
    Predicate       shift and go to state 4
    Not             shift and go to state 1

    expression                     shift and go to state 11

state 8

    (3) expression -> expression And . expression
    (1) expression -> . Left expression Right
    (2) expression -> . Predicate
    (3) expression -> . expression And expression
    (4) expression -> . expression Or expression
    (5) expression -> . expression Inference expression
    (6) expression -> . Not expression

    Left            shift and go to state 2
    Predicate       shift and go to state 4
    Not             shift and go to state 1

    expression                     shift and go to state 12

state 9

    (4) expression -> expression Or . expression
    (1) expression -> . Left expression Right
    (2) expression -> . Predicate
    (3) expression -> . expression And expression
    (4) expression -> . expression Or expression
    (5) expression -> . expression Inference expression
    (6) expression -> . Not expression

    Left            shift and go to state 2
    Predicate       shift and go to state 4
    Not             shift and go to state 1

    expression                     shift and go to state 13

state 10

    (1) expression -> Left expression Right .

    Right           reduce using rule 1 (expression -> Left expression Right .)
    And             reduce using rule 1 (expression -> Left expression Right .)
    Or              reduce using rule 1 (expression -> Left expression Right .)
    Inference       reduce using rule 1 (expression -> Left expression Right .)
    $end            reduce using rule 1 (expression -> Left expression Right .)


state 11

    (5) expression -> expression Inference expression .
    (3) expression -> expression . And expression
    (4) expression -> expression . Or expression
    (5) expression -> expression . Inference expression

    Right           reduce using rule 5 (expression -> expression Inference expression .)
    Inference       reduce using rule 5 (expression -> expression Inference expression .)
    $end            reduce using rule 5 (expression -> expression Inference expression .)
    And             shift and go to state 8
    Or              shift and go to state 9

  ! And             [ reduce using rule 5 (expression -> expression Inference expression .) ]
  ! Or              [ reduce using rule 5 (expression -> expression Inference expression .) ]
  ! Inference       [ shift and go to state 7 ]


state 12

    (3) expression -> expression And expression .
    (3) expression -> expression . And expression
    (4) expression -> expression . Or expression
    (5) expression -> expression . Inference expression

    Right           reduce using rule 3 (expression -> expression And expression .)
    And             reduce using rule 3 (expression -> expression And expression .)
    Or              reduce using rule 3 (expression -> expression And expression .)
    Inference       reduce using rule 3 (expression -> expression And expression .)
    $end            reduce using rule 3 (expression -> expression And expression .)

  ! And             [ shift and go to state 8 ]
  ! Or              [ shift and go to state 9 ]
  ! Inference       [ shift and go to state 7 ]


state 13

    (4) expression -> expression Or expression .
    (3) expression -> expression . And expression
    (4) expression -> expression . Or expression
    (5) expression -> expression . Inference expression

    Right           reduce using rule 4 (expression -> expression Or expression .)
    Or              reduce using rule 4 (expression -> expression Or expression .)
    Inference       reduce using rule 4 (expression -> expression Or expression .)
    $end            reduce using rule 4 (expression -> expression Or expression .)
    And             shift and go to state 8

  ! And             [ reduce using rule 4 (expression -> expression Or expression .) ]
  ! Or              [ shift and go to state 9 ]
  ! Inference       [ shift and go to state 7 ]

